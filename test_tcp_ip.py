import socket
import threading
import time
import pytest


HOST = '127.0.0.1'
PORT = 12345


def tcp_server(stop_event):
    """–§–æ–Ω–æ–≤—ã–π TCP-—Å–µ—Ä–≤–µ—Ä, –∑–∞–≤–µ—Ä—à–∞–µ–º—ã–π —á–µ—Ä–µ–∑ stop_event"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    server_socket.settimeout(0.1)

    while not stop_event.is_set():
        try:
            client_socket, _ = server_socket.accept()
            with client_socket:
                data = client_socket.recv(1024).decode()
                response = f'–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: {data}'
                client_socket.sendall(response.encode())
        except socket.timeout:
            continue
        except OSError:
            break

    server_socket.close()


@pytest.fixture(scope='module', autouse=True)
def server_thread():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
    stop_event = threading.Event()
    thread = threading.Thread(target=tcp_server, args=(stop_event,))
    thread.start()
    time.sleep(0.2)  # –ñ–¥–µ–º —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞

    yield  # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã

    stop_event.set()

    # –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã accept() —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è
    try:
        with socket.create_connection((HOST, PORT), timeout=1) as s:
            s.sendall(b'stop')
    except Exception:
        pass

    thread.join(timeout=2)


@pytest.fixture
def send_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    def _send(msg: str) -> str:
        with socket.create_connection((HOST, PORT), timeout=1) as sock:
            sock.sendall(msg.encode())
            sock.shutdown(socket.SHUT_WR)  # üí° —Å–∏–≥–Ω–∞–ª ¬´–¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç¬ª
            return sock.recv(1024).decode()
    return _send


def test_hello(send_message):
    assert send_message('–ü—Ä–∏–≤–µ—Ç') == '–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: –ü—Ä–∏–≤–µ—Ç'


def test_empty(send_message):
    assert send_message('') == '–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: '


def test_long(send_message):
    msg = 'x' * 512
    assert send_message(msg) == f'–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: {msg}'
